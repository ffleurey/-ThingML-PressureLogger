thing ArduinoSensor includes LoggerMsgs , TimerMsgs @c_header "#include <ifx_dps310.h>" @c_global "
IFX_Dps310 ifxDps310_1 = IFX_Dps310();
IFX_Dps310 ifxDps310_2 = IFX_Dps310();
" {
	provided port gateway {
		sends pressure
	}
	required port clock {
		receives sample_clock
	}
	function initialize_sensors() do
	'ifxDps310_1.begin(Wire, 0x76);
  		 ifxDps310_2.begin(Wire, 0x77);
  		 ifxDps310_1.correctTemp();
  		 ifxDps310_2.correctTemp();'
	end
	function sample_pressure() do
		var p1 : Long
		var p2 : Long
		'ifxDps310_1.measurePressureOnce(' & p1 & ', 1);'
		'ifxDps310_2.measurePressureOnce(' & p2 & ', 1);'
		gateway!pressure(p1, p2)
	end
	statechart Main init SAMPLING {
		on entry initialize_sensors()
		state SAMPLING {
			internal
			event clock?sample_clock
			action sample_pressure()
		}
	}
}
thing LoggerMsgs {
	message pressure(a : Long, b : Long)
	@code "20"
}
thing fragment TimerMsgs {
	message timer_start(id : UInt8, time : UInt32)
	@timer_start "true" message timer_cancel(id : UInt8)
	@timer_cancel "true" message timer_timeout(id : UInt8)
	@timeout "true" message sample_clock()
	@xms_tic "100"
}
datatype Byte<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
	@java_primitive "true"
datatype Boolean<2>
	@type_checker "Boolean"
	@c_type "bool"
	@c_byte_size "2"
	@java_type "boolean"
	@java_primitive "true"
datatype Integer<2>
	@type_checker "Integer"
	@c_type "int"
	@c_byte_size "2"
	@java_type "short"
	@java_primitive "true"
	@ros_type "int16"
datatype UInt8<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "short"
	@java_primitive "true"
datatype Int8<1>
	@type_checker "Integer"
	@c_type "int8_t"
	@c_byte_size "1"
	@java_type "byte"
	@java_primitive "true"
datatype UInt16<2>
	@type_checker "Integer"
	@c_type "uint16_t"
	@c_byte_size "2"
	@java_type "int"
	@java_primitive "true"
datatype Int16<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
	@java_type "short"
	@java_primitive "true"
datatype Int32<4>
	@type_checker "Integer"
	@c_type "int32_t"
	@c_byte_size "4"
	@java_type "int"
	@java_primitive "true"
datatype UInt32<4>
	@c_type "uint32_t"
	@java_type "long"
	@java_primitive "true"
datatype Long<4>
	@type_checker "Integer"
	@c_type "long"
	@c_byte_size "4"
	@java_type "int"
	@java_primitive "true"
datatype ULong<4>
	@type_checker "Integer"
	@c_type "unsigned long"
	@c_byte_size "4"
	@java_type "long"
	@java_primitive "true"
datatype Double<8>
	@type_checker "Real"
	@c_type "double"
	@c_byte_size "8"
	@java_type "float"
	@java_primitive "true"
datatype Float<8>
	@type_checker "Real"
	@c_type "float"
	@c_byte_size "8"
	@java_type "float"
	@java_primitive "true"
datatype Char<1>
	@type_checker "Character"
	@c_type "char"
	@c_byte_size "1"
	@java_type "char"
	@js_type "char"
	@java_primitive "true"
object String
	@c_type "char *"
	@c_byte_size "*"
	@java_type "String"
	@js_type "String"
enumeration DigitalState
	@type_checker "Integer"
	@java_type "byte"
	@java_primitive "true"
	@c_byte_size "1"
	@c_type "uint8_t"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
datatype LongLong<8>
	@type_checker "Integer"
	@c_type "long long"
	@c_byte_size "8"
	@java_type "long"
	@java_primitive "true"
protocol Serial @serializer "Binary" ;

protocol Timer ;

configuration ArduinoSensor {
	instance sensor : ArduinoSensor
	connector sensor.clock over Timer
	connector sensor.gateway over Serial
}
